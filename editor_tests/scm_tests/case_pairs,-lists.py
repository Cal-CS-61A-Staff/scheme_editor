from scheme_runner import SchemeTestCase, Query
cases = [
SchemeTestCase([Query(code=['(define (add-rat x y)', '(make-rat (+ (* (numer x) (denom y))', '(* (numer y) (denom x)))', '(* (denom x) (denom y))))'], expected={}), Query(code=['(define (sub-rat x y)', '(make-rat (- (* (numer x) (denom y))', '(* (numer y) (denom x)))', '(* (denom x) (denom y))))'], expected={}), Query(code=['(define (mul-rat x y)', '(make-rat (* (numer x) (numer y))', '(* (denom x) (denom y))))'], expected={}), Query(code=['(define (div-rat x y)', '(make-rat (* (numer x) (denom y))', '(* (denom x) (numer y))))'], expected={}), Query(code=['(define (equal-rat? x y)', '(= (* (numer x) (denom y))', '(* (numer y) (denom x))))'], expected={}), Query(code=['(define x (cons 1 2))'], expected={}), Query(code=['(car x)'], expected={'out': ['1\n']}), Query(code=['(cdr x)'], expected={'out': ['2\n']}), Query(code=['(define x (cons 1 2))'], expected={}), Query(code=['(define y (cons 3 4))'], expected={}), Query(code=['(define z (cons x y))'], expected={}), Query(code=['(car (car z))'], expected={'out': ['1\n']}), Query(code=['(car (cdr z))'], expected={'out': ['3\n']}), Query(code=['z'], expected={'out': ['((1 . 2) 3 . 4)\n']}), Query(code=['(define (make-rat n d) (cons n d))'], expected={}), Query(code=['(define (numer x) (car x))'], expected={}), Query(code=['(define (denom x) (cdr x))'], expected={}), Query(code=['(define (print-rat x)', '(display (numer x))', "(display '/)", '(display (denom x))', '(newline))'], expected={}), Query(code=['(define one-half (make-rat 1 2))'], expected={}), Query(code=['(print-rat one-half)'], expected={'out': ['1/2\n']}), Query(code=['(define one-third (make-rat 1 3))'], expected={}), Query(code=['(print-rat (add-rat one-half one-third))'], expected={'out': ['5/6\n']}), Query(code=['(print-rat (mul-rat one-half one-third))'], expected={'out': ['1/6\n']}), Query(code=['(print-rat (add-rat one-third one-third))'], expected={'out': ['6/9\n']}), Query(code=['(define (gcd a b)', '(if (= b 0)', 'a', '(gcd b (remainder a b))))'], expected={}), Query(code=['(define (make-rat n d)', '(let ((g (gcd n d)))', '(cons (/ n g) (/ d g))))'], expected={}), Query(code=['(print-rat (add-rat one-third one-third))'], expected={'out': ['2/3\n']}), Query(code=['(define one-through-four (list 1 2 3 4))'], expected={}), Query(code=['one-through-four'], expected={'out': ['(1 2 3 4)\n']}), Query(code=['(car one-through-four)'], expected={'out': ['1\n']}), Query(code=['(cdr one-through-four)'], expected={'out': ['(2 3 4)\n']}), Query(code=['(car (cdr one-through-four))'], expected={'out': ['2\n']}), Query(code=['(cons 10 one-through-four)'], expected={'out': ['(10 1 2 3 4)\n']}), Query(code=['(cons 5 one-through-four)'], expected={'out': ['(5 1 2 3 4)\n']}), Query(code=['(define (map proc items)', '(if (null? items)', 'nil', '(cons (proc (car items))', '(map proc (cdr items)))))'], expected={}), Query(code=['(map abs (list -10 2.5 -11.6 17))'], expected={'out': ['(10 2.5 11.6 17)\n']}), Query(code=['(map (lambda (x) (* x x))', '(list 1 2 3 4))'], expected={'out': ['(1 4 9 16)\n']}), Query(code=['(define (scale-list items factor)', '(map (lambda (x) (* x factor))', 'items))'], expected={}), Query(code=['(scale-list (list 1 2 3 4 5) 10)'], expected={'out': ['(10 20 30 40 50)\n']}), Query(code=['(define (count-leaves x)', '(cond ((null? x) 0)', '((not (pair? x)) 1)', '(else (+ (count-leaves (car x))', '(count-leaves (cdr x))))))'], expected={}), Query(code=['(define x (cons (list 1 2) (list 3 4)))'], expected={}), Query(code=['(count-leaves x)'], expected={'out': ['4\n']}), Query(code=['(count-leaves (list x x))'], expected={'out': ['8\n']})])
]
