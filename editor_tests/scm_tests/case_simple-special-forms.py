from scheme_runner import SchemeTestCase, Query
cases = [
SchemeTestCase([Query(code=[], expected={}), Query(code=['(define (square x) (* x x))'], expected={}), Query(code=['(define (abs x)', '(cond ((> x 0) x)', '((= x 0) 0)', '((< x 0) (- x))))'], expected={}), Query(code=['(abs -3)'], expected={'out': ['3\n']}), Query(code=['(abs 0)'], expected={'out': ['0\n']}), Query(code=['(abs 3)'], expected={'out': ['3\n']}), Query(code=['(define (a-plus-abs-b a b)', '((if (> b 0) + -) a b))'], expected={}), Query(code=['(a-plus-abs-b 3 -2)'], expected={'out': ['5\n']}), Query(code=['(define (sqrt-iter guess x)', '(if (good-enough? guess x)', 'guess', '(sqrt-iter (improve guess x)', 'x)))'], expected={}), Query(code=['(define (improve guess x)', '(average guess (/ x guess)))'], expected={}), Query(code=['(define (average x y)', '(/ (+ x y) 2))'], expected={}), Query(code=['(define (good-enough? guess x)', '(< (abs (- (square guess) x)) 0.001))'], expected={}), Query(code=['(define (sqrt x)', '(sqrt-iter 1.0 x))'], expected={}), Query(code=['(sqrt 9)'], expected={'out': ['3.00009155413138\n']}), Query(code=['(sqrt (+ 100 37))'], expected={'out': ['11.704699917758145\n']}), Query(code=['(sqrt (+ (sqrt 2) (sqrt 3)))'], expected={'out': ['1.7739279023207892\n']}), Query(code=['(square (sqrt 1000))'], expected={'out': ['1000.000369924366\n']})])
]
