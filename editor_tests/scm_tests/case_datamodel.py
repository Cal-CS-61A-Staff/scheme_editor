from scheme_runner import SchemeTestCase, Query
cases = [
SchemeTestCase([Query(code=['(define a 1)'], expected={}), Query(code=['(define b 2)'], expected={}), Query(code=['(list a b)'], expected={'out': ['(1 2)\n']}), Query(code=["(list 'a 'b)"], expected={'out': ['(a b)\n']}), Query(code=["(list 'a b)"], expected={'out': ['(a 2)\n']}), Query(code=["(car '(a b c))"], expected={'out': ['a\n']}), Query(code=["(cdr '(a b c))"], expected={'out': ['(b c)\n']}), Query(code=['(define (memq item x)', '(cond ((null? x) false)', '((eqv? item (car x)) x)', '(else (memq item (cdr x)))))'], expected={}), Query(code=["(memq 'apple '(pear banana prune))"], expected={'out': ['#f\n']}), Query(code=["(memq 'apple '(x (apple sauce) y apple pear))"], expected={'out': ['(apple pear)\n']}), Query(code=['(define (equal? x y)', '(cond ((pair? x) (and (pair? y)', '(equal? (car x) (car y))', '(equal? (cdr x) (cdr y))))', '((null? x) (null? y))', '(else (eqv? x y))))'], expected={}), Query(code=["(equal? '(1 2 (three)) '(1 2 (three)))"], expected={'out': ['#t\n']}), Query(code=["(equal? '(1 2 (three)) '(1 2 three))"], expected={'out': ['#f\n']}), Query(code=["(equal? '(1 2 three) '(1 2 (three)))"], expected={'out': ['#f\n']})])
]
