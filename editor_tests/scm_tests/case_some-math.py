from scheme_runner import SchemeTestCase, Query
cases = [
SchemeTestCase([Query(code=[], expected={}), Query(code=['(define (odd? x) (= 1 (remainder x 2)))'], expected={}), Query(code=['(define (filter predicate sequence)', '(cond ((null? sequence) nil)', '((predicate (car sequence))', '(cons (car sequence)', '(filter predicate (cdr sequence))))', '(else (filter predicate (cdr sequence)))))'], expected={}), Query(code=['(filter odd? (list 1 2 3 4 5))'], expected={'out': ['(1 3 5)\n']}), Query(code=['(define (accumulate op initial sequence)', '(if (null? sequence)', 'initial', '(op (car sequence)', '(accumulate op initial (cdr sequence)))))'], expected={}), Query(code=['(accumulate + 0 (list 1 2 3 4 5))'], expected={'out': ['15\n']}), Query(code=['(accumulate * 1 (list 1 2 3 4 5))'], expected={'out': ['120\n']}), Query(code=['(accumulate cons nil (list 1 2 3 4 5))'], expected={'out': ['(1 2 3 4 5)\n']}), Query(code=['(define (enumerate-interval low high)', '(if (> low high)', 'nil', '(cons low (enumerate-interval (+ low 1) high))))'], expected={}), Query(code=['(enumerate-interval 2 7)'], expected={'out': ['(2 3 4 5 6 7)\n']}), Query(code=['(define (enumerate-tree tree)', '(cond ((null? tree) nil)', '((not (pair? tree)) (list tree))', '(else (append (enumerate-tree (car tree))', '(enumerate-tree (cdr tree))))))'], expected={}), Query(code=['(enumerate-tree (list 1 (list 2 (list 3 4)) 5))'], expected={'out': ['(1 2 3 4 5)\n']})])
]
